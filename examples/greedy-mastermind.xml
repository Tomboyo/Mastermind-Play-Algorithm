<?xml version="1.0" encoding="UTF-8"?>
<!-- This configuration uses greedy algorithms to compute an optimal set of
moves. It's not guaranteed to be correct, but it is substantially faster than
 the enumerative approach. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="colors"
	class="java.lang.Integer">
		<constructor-arg value="6"/>
	</bean>

	<bean id="pegs"
	class="java.lang.Integer">
		<constructor-arg value="4"/>
	</bean>

	<bean id="provider"
	class="edu.vwc.mastermind.sequence.provider.AllCodesProvider">
		<constructor-arg type="int" ref="colors" />
		<constructor-arg type="int" ref="pegs" />
	</bean>

	<!-- Subset of all codes without isomorphs. The thinking is that isomorphic
		first guess codes create isomorphic trees. This reduces the overall
		number of trees we compare. -->
	<bean id="first_guess_provider"
	class="edu.vwc.mastermind.sequence.provider.WithoutIsomorphsCodesProvider">
		<constructor-arg index="0" ref="provider" />
		<constructor-arg index="1" ref="colors" />
	</bean>

	<!-- Set of all Codes to use as first guesses -->
	<bean id="first_guesses"
	class="java.util.Set"
	factory-bean="first_guess_provider"
	factory-method="getCodes" />

	<!-- Set of all Codes which must be guessed eventually (the answers) -->
	<bean id="all_answers"
	class="java.util.Set"
	factory-bean="provider"
	factory-method="getCodes" />

	<!-- A Tree comparator that sorts desired strategy trees, where better
		is "less than" worse. -->
	<bean id="comparator"
	class="edu.vwc.mastermind.tree.compare.RequiredTurnsComparator">
	</bean>

	<!-- Decides what codes to guess after each subsequent guess. This
	implementation emulate's Knuths approach by preferring guesses which are
	guaranteed to eliminate as many answers as possible. It prefers to guess
	potential answers when possible. -->
	<bean id="factory"
	class="edu.vwc.mastermind.sequence.provider.GreedyCodesProviderFactory">
		<constructor-arg index="0">
			<bean factory-bean="provider" factory-method="getCodes" />
		</constructor-arg>
	</bean>

	<!-- Defines the threading context in which the strategy tree is generated.
	-->
	<bean id="executor"
	class="java.util.concurrent.Executors"
	factory-method="newCachedThreadPool" />

</beans>